admin.sh
artifact.sh
bin
classes
depgraph.py
genbash.py
ignore.txt
main.py
Makefile
prefixes.py
prefix_parser.py
__pycache__
reaction_list.txt
reactions_mod.py
reactions_v5.py
run_lots.sh
src
testprint.txt
test.sh
test_subp.py
test_v2
test_v2.cpp
test_v2.dsc
test_v2.h
test_v2.ivy
test_v2.txt
test_v3
test_v3.cpp
test_v3.dsc
test_v3.h
test_v3.ivy
trace_list.txt
two.sh

================================================================================
Welcome to RAGTIMER for trace generation.
This is a work in progress. Please submit bug reports.
================================================================================

Constructing a dependency graph
Finished constructing a dependency graph, found these prefixes:
r1 

/home/landonjefftaylor/combined_ragtimer/_ragtimer
Finding 100
For each prefix: 100
--------------------------------------------------
Testing Prefix r1 
--------------------------------------------------
starting to run initial test
finished initial test
The iters recorded for this initial example is 83
Running test for 100 simulation runs in group 1 of 1
finished randomized testing
Run 1 did not reach the target state

Run 5 did not reach the target state

Run 32 did not reach the target state

Run 57 did not reach the target state

Run 63 did not reach the target state

Run 75 did not reach the target state

Run 83 did not reach the target state

Run 86 did not reach the target state

Run 92 did not reach the target state

Run 97 did not reach the target state


The traces recorded and the information on those traces are stored in 'reaction_list.txt'

The traces by themselves (i.e. for simulation and commuting) are found in 'trace_list.txt'

================================================================================
Total Sum of Unique Path Probabilities: 0.0
================================================================================




(javac -classpath "/usr/local/bin/prism/classes:/usr/local/bin/prism/lib/*:/usr/local/bin/prism/prism/classes:/usr/local/bin/prism/prism/lib/*" -d classes src/./BuildModel.java)
PRISM_DIR=/usr/local/bin/prism PRISM_MAINCLASS=simulate.BuildModel bin/run
Welcome to the model commutation tool.
Getting Parameters from input file
Model Name: ../model.sm
Trace List Name: ../commute_traces.txt
Property: s2>=80
Max Depth: 10
Time Bound: 100000.0
Terminating with depth bound
Cycle length: 2
Cycle initial values for testing: 4
Verbose mode disabled
Prism model and property loaded succesfully.
Iterating through each input trace.
Expect this to run silently for a moment.
4 newTrans.to == newTrans.from == 40[r2]
4 newTrans.to == newTrans.from == 42[r2]
4 newTrans.to == newTrans.from == 43[r2]
4 newTrans.to == newTrans.from == 44[r2]
4 newTrans.to == newTrans.from == 45[r2]
4 newTrans.to == newTrans.from == 46[r2]
4 newTrans.to == newTrans.from == 47[r2]
4 newTrans.to == newTrans.from == 48[r2]
4 newTrans.to == newTrans.from == 49[r2]
Processed 25 paths with a state count of 62
Processed 50 paths with a state count of 62
Processed 75 paths with a state count of 62
Processed 100 paths with a state count of 62
Processed 100 paths with a state count of 62
State graph built. Appending cycles where allowable.
Added 62 cycles, with 1 new states and 4 transitions.
Removed 0 dead-end states and 0 probability sink states (total 0 states).
Removed 0 corresponding transitions.

Final Count:
63 states
142 transitions

Establishing an absorbing state.
Begin printing model files.
Now printing 100 paths to PRISM model files.
Now printing 100 paths to STORM model files.
---------------------------------------
BEGIN ERROR CHECKING
If an inconsistency is found in the state space, its details will be provided here.
Otherwise, assume the generated state-space is error-free.
This is an added confidence booster for the probability results.

Checking state 40
ERROR: newStateVarVals[1] (81) NOT EQUAL TO stateList.get(stateList.get(40).outgoingTrans.get(2).to).stateVars[1] (82)
From state 40:(1,80) [ 3.0 TARGET ]
Transition [r1]
Intended for state 43:(1,82) [ 3.0500000000000003 TARGET ]
Arrived at state (1,81)

Checking state 40
ERROR: newTranRate (2.0) NOT EQUAL TO stateList.get(40).outgoingTrans.get(3).rate (2.025

Checking state 40
ERROR: newStateVarVals[1] (79) NOT EQUAL TO stateList.get(stateList.get(40).outgoingTrans.get(3).to).stateVars[1] (80)
From state 40:(1,80) [ 3.0 TARGET ]
Transition [r2]
Intended for state 40:(1,80) [ 3.0 TARGET ]
Arrived at state (1,79)

Checking state 42
ERROR: newStateVarVals[1] (82) NOT EQUAL TO stateList.get(stateList.get(42).outgoingTrans.get(2).to).stateVars[1] (83)
From state 42:(1,81) [ 3.025 TARGET ]
Transition [r1]
Intended for state 44:(1,83) [ 3.075 TARGET ]
Arrived at state (1,82)

Checking state 42
ERROR: newTranRate (2.025) NOT EQUAL TO stateList.get(42).outgoingTrans.get(3).rate (2.0500000000000003

Checking state 42
ERROR: newStateVarVals[1] (80) NOT EQUAL TO stateList.get(stateList.get(42).outgoingTrans.get(3).to).stateVars[1] (81)
From state 42:(1,81) [ 3.025 TARGET ]
Transition [r2]
Intended for state 42:(1,81) [ 3.025 TARGET ]
Arrived at state (1,80)

Checking state 43
ERROR: newStateVarVals[1] (83) NOT EQUAL TO stateList.get(stateList.get(43).outgoingTrans.get(2).to).stateVars[1] (84)
From state 43:(1,82) [ 3.0500000000000003 TARGET ]
Transition [r1]
Intended for state 45:(1,84) [ 3.1 TARGET ]
Arrived at state (1,83)

Checking state 43
ERROR: newTranRate (2.0500000000000003) NOT EQUAL TO stateList.get(43).outgoingTrans.get(3).rate (2.075

Checking state 43
ERROR: newStateVarVals[1] (81) NOT EQUAL TO stateList.get(stateList.get(43).outgoingTrans.get(3).to).stateVars[1] (82)
From state 43:(1,82) [ 3.0500000000000003 TARGET ]
Transition [r2]
Intended for state 43:(1,82) [ 3.0500000000000003 TARGET ]
Arrived at state (1,81)

Checking state 44
ERROR: newStateVarVals[1] (84) NOT EQUAL TO stateList.get(stateList.get(44).outgoingTrans.get(2).to).stateVars[1] (85)
From state 44:(1,83) [ 3.075 TARGET ]
Transition [r1]
Intended for state 46:(1,85) [ 3.125 TARGET ]
Arrived at state (1,84)

Checking state 44
ERROR: newTranRate (2.075) NOT EQUAL TO stateList.get(44).outgoingTrans.get(3).rate (2.1

Checking state 44
ERROR: newStateVarVals[1] (82) NOT EQUAL TO stateList.get(stateList.get(44).outgoingTrans.get(3).to).stateVars[1] (83)
From state 44:(1,83) [ 3.075 TARGET ]
Transition [r2]
Intended for state 44:(1,83) [ 3.075 TARGET ]
Arrived at state (1,82)

Checking state 45
ERROR: newStateVarVals[1] (85) NOT EQUAL TO stateList.get(stateList.get(45).outgoingTrans.get(2).to).stateVars[1] (86)
From state 45:(1,84) [ 3.1 TARGET ]
Transition [r1]
Intended for state 47:(1,86) [ 3.15 TARGET ]
Arrived at state (1,85)

Checking state 45
ERROR: newTranRate (2.1) NOT EQUAL TO stateList.get(45).outgoingTrans.get(3).rate (2.125

Checking state 45
ERROR: newStateVarVals[1] (83) NOT EQUAL TO stateList.get(stateList.get(45).outgoingTrans.get(3).to).stateVars[1] (84)
From state 45:(1,84) [ 3.1 TARGET ]
Transition [r2]
Intended for state 45:(1,84) [ 3.1 TARGET ]
Arrived at state (1,83)

Checking state 46
ERROR: newStateVarVals[1] (86) NOT EQUAL TO stateList.get(stateList.get(46).outgoingTrans.get(2).to).stateVars[1] (87)
From state 46:(1,85) [ 3.125 TARGET ]
Transition [r1]
Intended for state 48:(1,87) [ 3.1750000000000003 TARGET ]
Arrived at state (1,86)

Checking state 46
ERROR: newTranRate (2.125) NOT EQUAL TO stateList.get(46).outgoingTrans.get(3).rate (2.15

Checking state 46
ERROR: newStateVarVals[1] (84) NOT EQUAL TO stateList.get(stateList.get(46).outgoingTrans.get(3).to).stateVars[1] (85)
From state 46:(1,85) [ 3.125 TARGET ]
Transition [r2]
Intended for state 46:(1,85) [ 3.125 TARGET ]
Arrived at state (1,84)

Checking state 47
ERROR: newStateVarVals[1] (87) NOT EQUAL TO stateList.get(stateList.get(47).outgoingTrans.get(2).to).stateVars[1] (88)
From state 47:(1,86) [ 3.15 TARGET ]
Transition [r1]
Intended for state 49:(1,88) [ 3.2 TARGET ]
Arrived at state (1,87)

Checking state 47
ERROR: newTranRate (2.15) NOT EQUAL TO stateList.get(47).outgoingTrans.get(3).rate (2.1750000000000003

Checking state 47
ERROR: newStateVarVals[1] (85) NOT EQUAL TO stateList.get(stateList.get(47).outgoingTrans.get(3).to).stateVars[1] (86)
From state 47:(1,86) [ 3.15 TARGET ]
Transition [r2]
Intended for state 47:(1,86) [ 3.15 TARGET ]
Arrived at state (1,85)

Checking state 48
ERROR: newStateVarVals[1] (88) NOT EQUAL TO stateList.get(stateList.get(48).outgoingTrans.get(2).to).stateVars[1] (89)
From state 48:(1,87) [ 3.1750000000000003 TARGET ]
Transition [r1]
Intended for state 50:(1,89) [ 3.225 TARGET ]
Arrived at state (1,88)

Checking state 48
ERROR: newTranRate (2.1750000000000003) NOT EQUAL TO stateList.get(48).outgoingTrans.get(3).rate (2.2

Checking state 48
ERROR: newStateVarVals[1] (86) NOT EQUAL TO stateList.get(stateList.get(48).outgoingTrans.get(3).to).stateVars[1] (87)
From state 48:(1,87) [ 3.1750000000000003 TARGET ]
Transition [r2]
Intended for state 48:(1,87) [ 3.1750000000000003 TARGET ]
Arrived at state (1,86)

Checking state 49
ERROR: newStateVarVals[1] (89) NOT EQUAL TO stateList.get(stateList.get(49).outgoingTrans.get(2).to).stateVars[1] (90)
From state 49:(1,88) [ 3.2 TARGET ]
Transition [r1]
Intended for state 51:(1,90) [ 3.25 TARGET ]
Arrived at state (1,89)

Checking state 49
ERROR: newTranRate (2.2) NOT EQUAL TO stateList.get(49).outgoingTrans.get(3).rate (2.225

Checking state 49
ERROR: newStateVarVals[1] (87) NOT EQUAL TO stateList.get(stateList.get(49).outgoingTrans.get(3).to).stateVars[1] (88)
From state 49:(1,88) [ 3.2 TARGET ]
Transition [r2]
Intended for state 49:(1,88) [ 3.2 TARGET ]
Arrived at state (1,87)

END ERROR CHECKING
---------------------------------------
Finished! Processed 100 paths.
Max Memory: 88809472 bytes
Max Memory: 88809 KB
Max Memory: 88 MB
Max Memory: 0 GB
Welcome to RAGTIMER. At present, this is two tools joined together. We are working on joining them together more seamlessly but appreciate your patience with this prototype tool.
I will generate traces, then commute.
I am assuming you have placed your model in the following files:
model.ragtimer (in the RAGTIMER format; see README)
model.prop (file with property without time constraints in first line, i.e., x=10 )
model.sm (prism model file)
model.csl (prism csl property)

_commute/options.txt
Running RAGTIMER trace generation
/home/landonjefftaylor/combined_ragtimer/_ragtimer
Starting Commuting
Look for output files _commute/prism.* or _commute/storm.*
You can use these files in your favorite model checker.
