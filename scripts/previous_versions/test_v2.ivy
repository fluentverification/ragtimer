#lang ivy 1.7

object updater = {
	type num
	interpret num -> bv[10]
	type exec_var
	interpret exec_var -> bv[8]
	type exec_stage
	interpret exec_stage -> bv[3]

	action incr(x:num) returns(y:num) = {
		y := x + 1
	}

	action decr(x:num) returns(y:num) = {
		y := x - 1
	}
}

object goal = {
	action achieved(v:updater.num)
	object spec = {
		before achieved {
			assert v >= 80;
			protocol.idle := 1
		}
	}
}

object enabled_checker = {

	action is_enabled_r1(reactant1:updater.num) returns(y:bool) = {
		if reactant1 >= 1 {
			y := true
		}
		else {
			y := false
		}
	}

	action is_enabled_r2(reactant1:updater.num) returns(y:bool) = {
		if reactant1 >= 1 {
			y := true
		}
		else {
			y := false
		}
	}

	
}

object inspector = {
	action check_guard_r1(reactant1:updater.num)
	before check_guard_r1 {
		assert reactant1 >= 1
	}

	action check_guard_r2(reactant1:updater.num)
	before check_guard_r2 {
		assert reactant1 >= 1
	}

	
}

object selector = {
	individual r1_exec : updater.exec_var
	individual r2_exec : updater.exec_var
	
	individual r1_rate : updater.exec_var
	individual r2_rate : updater.exec_var
	
	individual r1_count : updater.exec_var
	individual r2_count : updater.exec_var
	
	individual r1_count_rate : updater.exec_var
	individual r2_count_rate : updater.exec_var
	
	individual r1_stage : updater.exec_stage
	individual r2_stage : updater.exec_stage
	

	after init {
		r1_count := 0;
		r2_count := 0;
		

		r1_count_rate := 4;
		r2_count_rate := 4;
		
	}

	action execute_r1 returns(y:bool) = {
		r1_exec := r1_exec + 1;
		if r1_exec >= r1_rate {
			y := true;
			r1_exec := 0;
			r1_count := r1_count + 1
		}
		else {
			y := false
		};
		if r1_count >= r1_count_rate {
			r1_stage := r1_stage + 1;
			r1_count := 0
		};
		if r1_stage = 0 {
			r1_count_rate := 4;
			r1_rate := 1
		}
		else if r1_stage = 1 {
			r1_count_rate := 4;
			r1_rate := 1
		}
		else if r1_stage = 2 {
			r1_count_rate := 4;
			r1_rate := 1
		}
		else if r1_stage = 3 {
			r1_count_rate := 4;
			r1_rate := 1
		}
		else if r1_stage = 4 {
			r1_count_rate := 4;
			r1_rate := 1
		}
		else if r1_stage = 5 {
			r1_count_rate := 4;
			r1_rate := 1
		}
		else if r1_stage = 6 {
			r1_count_rate := 4;
			r1_rate := 1
		}
		else if r1_stage = 7 {
			r1_count_rate := 4;
			r1_rate := 1
		}
		else {
			r1_stage := 0
		}
	}

	action execute_r2 returns(y:bool) = {
		r2_exec := r2_exec + 1;
		if r2_exec >= r2_rate {
			y := true;
			r2_exec := 0;
			r2_count := r2_count + 1
		}
		else {
			y := false
		};
		if r2_count >= r2_count_rate {
			r2_stage := r2_stage + 1;
			r2_count := 0
		};
		if r2_stage = 0 {
			r2_count_rate := 5;
			r2_rate := 250
		}
		else if r2_stage = 1 {
			r2_count_rate := 3;
			r2_rate := 250
		}
		else if r2_stage = 2 {
			r2_count_rate := 2;
			r2_rate := 250
		}
		else if r2_stage = 3 {
			r2_count_rate := 9;
			r2_rate := 250
		}
		else if r2_stage = 4 {
			r2_count_rate := 4;
			r2_rate := 250
		}
		else if r2_stage = 5 {
			r2_count_rate := 2;
			r2_rate := 250
		}
		else if r2_stage = 6 {
			r2_count_rate := 5;
			r2_rate := 250
		}
		else if r2_stage = 7 {
			r2_count_rate := 1;
			r2_rate := 250
		}
		else {
			r2_stage := 0
		}
	}

	
}

object protocol = {

	type 2bit
	interpret 2bit -> bv[1]
	individual idle : 2bit

	individual r_s1 : updater.num
	individual r_s2 : updater.num

	after init {
		r_s1 := 1;
		r_s2 := 40;
		idle := 0
	}

	action update_r1 = {
		if selector.execute_r1 {
			call inspector.check_guard_r1(r_s1);
			r_s1 := updater.decr(r_s1);
			r_s1 := updater.incr(r_s1);
			r_s2 := updater.incr(r_s2);
			if r_s2 >= 80 {
				call goal.achieved(r_s2)
			}
		}
	}

	action update_r2 = {
		if selector.execute_r2 {
			call inspector.check_guard_r2(r_s2);
			r_s2 := updater.decr(r_s2)
		}
	}

	

	action idling = {}

	before update_r1 {
		assert idle = 0;
		assert enabled_checker.is_enabled_r1(r_s1)
	}
	before update_r2 {
		assert idle = 0;
		assert enabled_checker.is_enabled_r2(r_s2);
		assert false
	}
	

	before idling {
		assert idle = 1
	}
}
export protocol.update_r1
export protocol.update_r2
export protocol.idling
import goal.achieved
import inspector.check_guard_r1
import inspector.check_guard_r2

isolate iso_proto = protocol with enabled_checker, updater, goal, selector, inspector