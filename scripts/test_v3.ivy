#lang ivy 1.7

    object updater = {
        type num
        interpret num -> bv[10]
        type exec_var
        interpret exec_var -> bv[8]
        type exec_stage
        interpret exec_stage -> bv[3]
        
        action incr(x:num) returns(y:num) = {
            y := x + 1
        }
        
        action decr(x:num) returns(y:num) = {
            y := x - 1
        }
    }

    
    object goal = {
        action achieved(v:updater.num)
        object spec = {
            before achieved {
                assert v <=  25;
                protocol.idle := 1
            }
        }
    }

    object enabled_checker = {

	action is_enabled_r4(reactant1:updater.num,reactant2:updater.num) returns(y:bool) = {
            if reactant1 >= 1 & reactant2 >= 1 {
                y := true
            }
            else {
                y := false
            }
        }
            
        action is_enabled_r6(reactant1:updater.num) returns(y:bool) = {
            if reactant1 >= 1 {
                y := true
            }
            else {
                y := false
            }
        }
            
        
}

object inspector = {
	action check_guard_r4(reactant1:updater.num,reactant2:updater.num)
	before check_guard_r4 {
            assert reactant1 >= 1 & reactant2 >= 1
	}

	action check_guard_r6(reactant1:updater.num)
	before check_guard_r6 {
            assert reactant1 >= 1
	}

	
}

object selector = {
	individual r4_exec : updater.exec_var
	individual r6_exec : updater.exec_var
	
	individual r4_rate : updater.exec_var
	individual r6_rate : updater.exec_var
	
	individual r4_count : updater.exec_var
	individual r6_count : updater.exec_var
	
	individual r4_count_rate : updater.exec_var
	individual r6_count_rate : updater.exec_var
	
	individual r4_stage : updater.exec_stage
	individual r6_stage : updater.exec_stage
	

	after init {
		r4_count := 0;
		r6_count := 0;
		

		r4_count_rate := 4;
		r6_count_rate := 4;
		
	}

	action execute_r4 returns(y:bool) = {
            r4_exec := r4_exec + 1;
            if r4_exec >= r4_rate {
                y := true;
                r4_exec := 0;
                r4_count := r4_count + 1
            }
            else {
                y := false
            };
            if r4_count >= r4_count_rate {
                r4_stage := r4_stage + 1;
                r4_count := 0
            };
            if r4_stage = 0 {
                r4_count_rate := 4;
                r4_rate := 1
            }
            else if r4_stage = 1 {
                r4_count_rate := 3;
                r4_rate := 1
            }
            else if r4_stage = 2 {
                r4_count_rate := 5;
                r4_rate := 1
            }
            else if r4_stage = 3 {
                r4_count_rate := 4;
                r4_rate := 1
            }
            else if r4_stage = 4 {
                r4_count_rate := 4;
                r4_rate := 1
            }
            else if r4_stage = 5 {
                r4_count_rate := 5;
                r4_rate := 1
            }
            else if r4_stage = 6 {
                r4_count_rate := 3;
                r4_rate := 1
            }
            else if r4_stage = 7 {
                r4_count_rate := 4;
                r4_rate := 1
            }
            else {
                r4_stage := 0
            }
        }
        action execute_r6 returns(y:bool) = {
            r6_exec := r6_exec + 1;
            if r6_exec >= r6_rate {
                y := true;
                r6_exec := 0;
                r6_count := r6_count + 1
            }
            else {
                y := false
            };
            if r6_count >= r6_count_rate {
                r6_stage := r6_stage + 1;
                r6_count := 0
            };
            if r6_stage = 0 {
                r6_count_rate := 4;
                r6_rate := 1
            }
            else if r6_stage = 1 {
                r6_count_rate := 3;
                r6_rate := 1
            }
            else if r6_stage = 2 {
                r6_count_rate := 5;
                r6_rate := 1
            }
            else if r6_stage = 3 {
                r6_count_rate := 4;
                r6_rate := 1
            }
            else if r6_stage = 4 {
                r6_count_rate := 4;
                r6_rate := 1
            }
            else if r6_stage = 5 {
                r6_count_rate := 5;
                r6_rate := 1
            }
            else if r6_stage = 6 {
                r6_count_rate := 3;
                r6_rate := 1
            }
            else if r6_stage = 7 {
                r6_count_rate := 4;
                r6_rate := 1
            }
            else {
                r6_stage := 0
            }
        }
        
}

object protocol = {

	type 2bit
	interpret 2bit -> bv[1]
	individual idle : 2bit

	individual r_s1 : updater.num
	individual r_s2 : updater.num
	individual r_s3 : updater.num
	individual r_s4 : updater.num
	individual r_s5 : updater.num
	individual r_s6 : updater.num
	individual r4_executions : updater.num
	individual r6_executions : updater.num

	after init {
		r_s1 := 1;
		r_s2 := 51;
		r_s3 := 0;
		r_s4 := 0;
		r_s5 := 48;
		r_s6 := 1;
		r4_executions := 0;
		r6_executions := 0;
		idle := 0
	}

	action update_r4 =  {
            if selector.execute_r4 {
			call inspector.check_guard_r4(r_s4,r_s5);
			r_s4 := updater.decr(r_s4);
			r_s5 := updater.decr(r_s5);
			r_s6 := updater.incr(r_s6);
			r4_executions := updater.incr(r4_executions);
			if r_s5 <= 25 {
				call goal.achieved(r_s5)
			}
		}
	}

	action update_r6 =  {
            if selector.execute_r6 {
			call inspector.check_guard_r6(r_s6);
			r_s6 := updater.decr(r_s6);
			r_s4 := updater.incr(r_s4);
			r_s2 := updater.incr(r_s2);
			r6_executions := updater.incr(r6_executions)
		}
	}

	

	action idling = {}

	

	action fail_test = {}

	before update_r4 {
		assert idle = 0;
		assert enabled_checker.is_enabled_r4(r_s4,r_s5);
		assert (r4_executions) < 25
	}
	before update_r6 {
		assert idle = 0;
		assert enabled_checker.is_enabled_r6(r_s6);
		assert (r6_executions) < 24
	}
	

	before idling {
		assert idle = 1
	}


	before fail_test {
		assert idle = 0;
		assert (enabled_checker.is_enabled_r4(r_s4,r_s5) = false & enabled_checker.is_enabled_r6(r_s6) = false) | (((r4_executions) >= 25) & ((r6_executions) >= 24))
	}



	after fail_test {
		assert false
	}

}

export protocol.fail_test
export protocol.update_r4
export protocol.update_r6
export protocol.idling
import goal.achieved
import inspector.check_guard_r4
import inspector.check_guard_r6

isolate iso_proto = protocol with enabled_checker, updater, goal, selector, inspector